contact.ts

export class Contact {
    firstName: string;
    lastName: string;
    phoneNo: string;
    constructor(fn?, ln?, num?) {
        this.firstName = fn;
        this.lastName = ln;
        this.phoneNo = num;
    }
}

contacts.service.ts

import { Contact } from './contact';
import { stringify } from '@angular/compiler/src/util';

export class ContactsService {
    contacts: Contact[];
    searchedContacts: Contact[];
    constructor() {
        this.contacts =[];
        this.contacts.push(new Contact('Kartik', 'Chawla', '9582225801'));
        this.contacts.push(new Contact('Ganesh', 'Dhingra', '9999999999'));
        this.contacts.push(new Contact('Jai', 'Kharayat', '1555555556'));
        this.contacts.push(new Contact('Khyati', 'Dhingra', '987654321'));
        this.contacts.push(new Contact('Test', '1', '0123456789'));
        this.contacts.push(new Contact('Test', '2', '2341234568'));
    }
    getContacts(): Contact[] {
        return this.contacts;
    }
    getSearchedContacts(name?: string): Contact[] {
        this.searchedContacts = [];
        if (name === undefined)
            return this.contacts;
        this.contacts.forEach(contact => {
            if ((contact.firstName + " " + contact.lastName + " " + contact.phoneNo).toLowerCase().includes(name))
                this.searchedContacts.push(contact)
        });
        return this.searchedContacts;
    }
    addContact(contact: Contact): void {
        this.contacts.push(contact);
    }
    sortContact(sortOn: number, sortType: number): void {
        this.contacts.sort((a, b) => {
            if (sortOn == 1) {
                if (sortType == 1)
                    return (a.firstName + " " + a.lastName).toLowerCase() > (b.firstName + " " + b.lastName).toLowerCase() ? 1 : -1;
                else
                    return (a.firstName + " " + a.lastName).toLowerCase() > (b.firstName + " " + b.lastName).toLowerCase() ? -1 : 1;
            }
            else {
                if (sortType == 1)
                    return a.phoneNo > b.phoneNo ? 1 : -1;
                else
                    return a.phoneNo > b.phoneNo ? -1 : 1;
            }
        });
    }
    updateContact(cont: Contact, updatedContact: Contact): void {
        this.contacts.forEach( (contact, index) => {
            if (contact === cont)
                this.contacts[index] = updatedContact;
        });
    }
    deleteContact(cont: Contact): void {
        this.contacts.forEach( (contact, index) => {
            if (contact === cont)
                this.contacts.splice(index, 1);
        });
    }  
}

contacts.component.ts

import { Component, OnInit } from '@angular/core';
import { Contact } from './contact';
import { ContactsService } from './contacts.service';
import { FormGroup, Validators, FormControl } from '@angular/forms';
import { typeWithParameters } from '@angular/compiler/src/render3/util';

@Component({
  selector: 'app-contacts',
  templateUrl: './contacts.component.html',
  styleUrls: ['./contacts.component.css']
})
export class ContactsComponent implements OnInit {

  contacts: Contact[];
  searchedContacts: Contact[];
  searchName: string;
  myForm: FormGroup;
  mySortForm: FormGroup;
  myUpdateForm: FormGroup;
  contact: Contact;
  addingContact: boolean = false;
  sortingContact: boolean = false;
  updatingContact: boolean = false;
  constructor(private contactSer: ContactsService) {
    this.contacts = this.contactSer.getContacts();
    this.searchedContacts = this.contactSer.getSearchedContacts();
    this.myForm = new FormGroup({
      firstname: new FormControl(null, Validators.required),
      lastname: new FormControl(null, Validators.required),
      phoneno: new FormControl(null, [Validators.required, Validators.pattern("^[0-9]*$"), Validators.minLength(7), Validators.maxLength(10)]),
    });
    this.mySortForm = new FormGroup({
      sorton: new FormControl(1, Validators.required),
      sorttype: new FormControl(1, Validators.required)
    });
    this.myUpdateForm = new FormGroup({
      ufirstname: new FormControl(null, Validators.required),
      ulastname: new FormControl(null, Validators.required),
      uphoneno: new FormControl(null, [Validators.required, Validators.pattern("^[0-9]*$"), Validators.minLength(7), Validators.maxLength(10)]),
    });
  }
  ngOnInit(): void {
  }
  get firstname() {
    return this.myForm.get('firstname');
  }
  get lastname() {
    return this.myForm.get('lastname');
  }
  get phoneno() {
    return this.myForm.get('phoneno');
  }
  get sorton() {
    return this.mySortForm.get('sorton');
  }
  get sorttype() {
    return this.mySortForm.get('sorttype');
  }
  get ufirstname() {
    return this.myUpdateForm.get('ufirstname');
  }
  get ulastname() {
    return this.myUpdateForm.get('ulastname');
  }
  get uphoneno() {
    return this.myUpdateForm.get('uphoneno');
  }
  searchContacts() {
    this.searchedContacts = this.contactSer.getSearchedContacts(this.searchName ? this.searchName.toLowerCase(): undefined);
  }
  addContactBox() {
    this.addingContact = true;
  }
  addContact(choice: number) {
    switch(choice) {
      case 1: {
        if(this.myForm.valid) {
          this.contactSer.addContact(new Contact(this.firstname.value, this.lastname.value, this.phoneno.value));
          this.myForm.reset();
          this.searchContacts();
        }
        break;
      }
      case 2: {
        this.myForm.reset()
        break;
      }
      case 3: {
        this.myForm.reset()
        this.addingContact = false;
        break;
      }
    } 
  }
  sortContactBox() {
    this.sortingContact = true;
  }
  sortContact(choice: number) {
    switch(choice) {
      case 1: {
        if (this.mySortForm.valid) {
          this.contactSer.sortContact(this.sorton.value, this.sorttype.value);
          this.sortingContact = false;
          this.searchContacts();
        }
        break;
      }
      case 2: {
        this.mySortForm.patchValue({sorton: 1, sorttype: 1});
        break;
      }
      case 3: {
        this.mySortForm.patchValue({sorton: 1, sorttype: 1});
        this.sortingContact = false;
        break;
      }
    }
  }
  updateContactBox(cont: Contact) {
    this.myUpdateForm.patchValue({
      ufirstname: cont.firstName,
      ulastname: cont.lastName,
      uphoneno: cont.phoneNo
    });
    this.contact = cont;
    this.updatingContact = true;
  }
  updateContact(choice: number) {
    switch(choice) {
      case 1: {
        if (this.myUpdateForm.valid) {
          this.contactSer.updateContact(this.contact, new Contact(this.ufirstname.value, this.ulastname.value, this.uphoneno.value));
          this.updatingContact = false;
          this.contact = new Contact();
          this.searchContacts();
        }
        break;
      }
      case 2: {
        this.updateContactBox(this.contact);
        break;
      }
      case 3: {
        this.myUpdateForm.reset()
        this.updatingContact = false;
        break;
      }
    }
  }
  deleteContact(cont: Contact) {
    if (this.contact === cont) {
      this.updatingContact = false;
      this.contact = new Contact();
    }
    this.contactSer.deleteContact(cont);
    this.searchContacts();
  }
}

contacts.component.html

<div class="alert alert-secondary container">

<h1><i class="fas fa-address-book"></i>&nbsp;&nbsp;Phone Book App</h1><br/><br/>
<h3>
    Contacts
    <button class="btn btn-secondary not-cancel" (click)=sortContactBox()>Sort</button>
    <button class="btn btn-primary not-cancel" (click)=addContactBox()>+ Add Contact</button>
</h3><br/>

<div>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
        </div>
        <input type="text" class="form-control" placeholder="Search for contacts..." [(ngModel)]="searchName" (keyup)="searchContacts()">
    </div>
    <div>
        <span *ngFor="let cont of searchedContacts" class="alert alert-light search border rounded-0" (click)=updateContactBox(cont)>
            <div style="color: black; font-size: 1.2em;">
                {{cont.firstName}} {{cont.lastName}}
                <button class="btn btn-danger delete" (click)=deleteContact(cont)><i class="far fa-trash-alt"></i></button>
            </div>
            <div style="color: grey">
                <i class="fas fa-phone-alt"></i>
                {{cont.phoneNo.substring(0,3)}}-{{cont.phoneNo.substring(3,6)}}-{{cont.phoneNo.substring(6,10)}}
            </div>
        </span>
    </div>
</div>
</div>

<div *ngIf="addingContact" class="alert alert-light change">
    <form [formGroup]="myForm">
        <div>
            <h3 style="color: black;">New contact
            <button class="btn cancel" (click)=addContact(3)><i class="fas fa-times"></i></button>
            </h3>
        </div>
        <hr/>
        <div class="inp">
            <input type="text" class="form-control" placeholder="First Name" formControlName="firstname">
            <div class="alert alert-danger" *ngIf="firstname.touched && firstname.invalid">
                <span *ngIf="firstname.errors.required">First Name cannot be empty</span>
            </div>
        </div>
        <div class="inp">
            <input type="text" class="form-control" placeholder="Last Name" formControlName="lastname">
            <div class="alert alert-danger" *ngIf="lastname.touched && lastname.invalid">
                <span *ngIf="lastname.errors.required">Last Name cannot be empty</span>
            </div>
        </div>
            <div class="inp">
            <input type="text" class="form-control" placeholder="Phone number" formControlName="phoneno">
            <div class="alert alert-danger" *ngIf="phoneno.touched && phoneno.invalid">
                <span *ngIf="phoneno.errors.required">Phone number cannot be empty</span>
                <span *ngIf="phoneno.errors.pattern">Phone number cannot contain non-numeric values<br/></span>
                <span *ngIf="phoneno.errors.minlength">Phone number cannot be less than 7 digits</span>
                <span *ngIf="phoneno.errors.maxlength">Phone number cannot be more than 10 digits</span>
            </div>
        </div>
        <button class="btn btn-secondary not-cancel" (click)=addContact(2)>Cancel</button>
        <button class="btn btn-primary not-cancel" (click)=addContact(1)>Create</button>
        <br/>
    </form>
</div>

<div *ngIf="sortingContact" class="alert alert-light change">
    <form [formGroup]="mySortForm">
        <div>
            <h3 style="color: black;">Sort Contacts
            <button class="btn cancel" (click)=sortContact(3)><i class="fas fa-times"></i></button>
            </h3>
        </div>
        <hr/>
        <div class="inp">
           Sort On:
            <select class="form-control" formControlName="sorton">
                <option value=1>Name</option>
                <option value=2>Number</option>
            </select>
            Sort Type:
            <select class="form-control" formControlName="sorttype">
                <option value=1>Ascending</option>
                <option value=2>Descending</option>
            </select>
        </div>
        <button class="btn btn-secondary not-cancel" (click)=sortContact(2)>Cancel</button>
        <button class="btn btn-primary not-cancel" (click)=sortContact(1)>Sort</button>
        <br/>
    </form>
</div>

<div *ngIf="updatingContact" class="alert alert-light change">
    <form [formGroup]="myUpdateForm">
        <div>
            <h3 style="color: black;">Update Contact
            <button class="btn cancel" (click)=updateContact(3)><i class="fas fa-times"></i></button>
            </h3>
        </div>
        <hr/>
        <div class="inp">
            <input type="text" class="form-control" placeholder="First Name" formControlName="ufirstname">
            <div class="alert alert-danger" *ngIf="ufirstname.touched && ufirstname.invalid">
                <span *ngIf="ufirstname.errors.required">First Name cannot be empty</span>
            </div>
        </div>
        <div class="inp">
            <input type="text" class="form-control" placeholder="Last Name" formControlName="ulastname">
            <div class="alert alert-danger" *ngIf="ulastname.touched && ulastname.invalid">
                <span *ngIf="ulastname.errors.required">Last Name cannot be empty</span>
            </div>
        </div>
            <div class="inp">
            <input type="text" class="form-control" placeholder="Phone number" formControlName="uphoneno">
            <div class="alert alert-danger" *ngIf="uphoneno.touched && uphoneno.invalid">
                <span *ngIf="uphoneno.errors.required">Phone number cannot be empty</span>
                <span *ngIf="uphoneno.errors.pattern">Phone number cannot contain non-numeric values<br/></span>
                <span *ngIf="uphoneno.errors.minlength">Phone number cannot be less than 7 digits</span>
                <span *ngIf="uphoneno.errors.maxlength">Phone number cannot be more than 10 digits</span>
            </div>
        </div>
        <button class="btn btn-secondary not-cancel" (click)=updateContact(2)>Cancel</button>
        <button class="btn btn-primary not-cancel" (click)=updateContact(1)>Update</button>
        <br/>
    </form>
</div>

contacts.component.css

.container {
    width: 50%;
    padding-left: 4%;
    padding-right: 4%;
}
h1 {
    text-align: center;
}
.search {
    display: block;
    overflow: hidden;
    margin: 0px;
}
.delete {
    float: right; 
    margin-left: -50%; 
    margin-top: 0.5em; 
    margin-bottom: 0.5em; 
    margin-right: 0.5em;
}
.change {
    position: fixed;
    top: 2%;
    width: 35%;
    margin-left: 32.5%;
    margin-right: 32.5%;
}
.inp {
    margin-bottom: 5%;
}
.not-cancel {
    float: right;
    margin-left: 1em;
}
.cancel {
    color: grey;
    float: right;
}

contacts.component.spec.ts

import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { ContactsComponent } from './contacts.component';

describe('ContactsComponent', () => {
  let component: ContactsComponent;
  let fixture: ComponentFixture<ContactsComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ ContactsComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(ContactsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

app.component.html

<app-contacts></app-contacts>

app.module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ContactsComponent } from './contacts/contacts.component';
import { ContactsService } from './contacts/contacts.service';

@NgModule({
  declarations: [
    AppComponent,
    ContactsComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule
  ],
  providers: [ContactsService],
  bootstrap: [AppComponent]
})
export class AppModule { }

index.html

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>PhoneBookApplication</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <script src="https://kit.fontawesome.com/32c0b5be87.js" crossorigin="anonymous"></script>
</head>
<body>
  <app-root></app-root>
</body>
</html>

styles.css

/* You can add global styles to this file, and also import other style files */
@import 'bootstrap/dist/css/bootstrap.css';

